version: '3.9'

# Include database configs
include:
    - ${DOCKER_SERVICE_PATH}/auth/database/db.yml
    - ${DOCKER_SERVICE_PATH}/main/database/db.yml
    - ${DOCKER_SERVICE_PATH}/build/database/db.yml

services:
    auth:
        extends:
            file: ${DOCKER_SERVICE_PATH}/auth/auth.yml
            service: auth_app
        networks:
            - visualboost
        depends_on:
            - mongodb_auth
        volumes:
            - ${LOG_DIR_AUTH}:/logs #Directory for log files
        labels:
            - "traefik.enable=true" #Detect this service
            - "traefik.http.routers.auth.entrypoints=visualboost" #Listen on Port ${PROXY_PORT}
            - "traefik.http.routers.auth.rule=Host(`${DOMAIN}`) && PathPrefix(`${PROXY_PATH_AUTH}`)" #Forward to this service when the domain with the path ${PROXY_PATH_AUTH} is called
            - "traefik.http.services.auth.loadbalancer.server.port=${HTTP_PORT_AUTH}" # Forward request to port ${HTTP_PORT_AUTH}

            #Remove ${PROXY_PATH_AUTH} before accessing this service. The original service does only listen on localhost:${HTTP_PORT_AUTH}.
            - "traefik.http.middlewares.strip-auth.stripprefix.prefixes=${PROXY_PATH_AUTH}"
            - "traefik.http.routers.auth.middlewares=strip-auth@docker"

            - "com.centurylinklabs.watchtower.enable=true" # Watchtower will update this container if /v1/update is fetched

#            - "traefik.http.routers.auth.tls.certresolver=sslresolver" #Necessary when running on a remote server with a letsencrypt certificate
        environment:
            - SSL_ENABLED=${SSL_ENABLED} #if SSL_ENABLED=false the service uses http:// instead of https://
            - PROXY_PORT=${PROXY_PORT} #Necessary for email authentication
            - PROXY_PATH=${PROXY_PATH_AUTH} #Necessary for email authentication
            - DEBUG=false #Logs all requests

    main:
        extends:
            file: ${DOCKER_SERVICE_PATH}/main/main.yml
            service: main_app
        volumes:
            - ${LOG_DIR_MAIN}:/logs #Directory for log files
        labels:
            - "traefik.enable=true" #Detect this service
            - "traefik.http.routers.main.entrypoints=visualboost" #Listen on Port ${PROXY_PORT}
            - "traefik.http.routers.main.rule=Host(`${DOMAIN}`) && PathPrefix(`${PROXY_PATH_MAIN}`)" #Forward to this service when the domain with the path ${PROXY_PATH_MAIN} is called
            - "traefik.http.services.main.loadbalancer.server.port=${HTTP_PORT_MAIN}" # Forward request to port ${HTTP_PORT_MAIN}

            #Remove ${PROXY_PATH_MAIN} before accessing this service. The original service does only listen on localhost:${HTTP_PORT_MAIN}.
            - "traefik.http.middlewares.strip-main.stripprefix.prefixes=${PROXY_PATH_MAIN}"
            - "traefik.http.routers.main.middlewares=strip-main@docker"

            - "com.centurylinklabs.watchtower.enable=true" # Watchtower will update this container if /v1/update is fetched

#            - "traefik.http.routers.main.tls.certresolver=sslresolver" #Necessary when running on a remote server with a letsencrypt certificate
        networks:
            - visualboost
        depends_on:
            - mongodb_main
            - auth

    build:
        extends:
            file: ${DOCKER_SERVICE_PATH}/build/build.yml
            service: build_app
        volumes:
            - ${LOG_DIR_BUILD}:/logs #Directory for log files
        labels:
            - "traefik.enable=true" #Detect this service
            - "traefik.http.routers.build.entrypoints=visualboost" #Listen on Port ${PROXY_PORT}
            - "traefik.http.routers.build.rule=Host(`${DOMAIN}`) && PathPrefix(`${PROXY_PATH_BUILD}`)" #Forward to this service when the domain with the path ${PROXY_PATH_BUILD} is called
            - "traefik.http.services.build.loadbalancer.server.port=${HTTP_PORT_BUILD}" # Forward request to port ${HTTP_PORT_BUILD}

            #Remove ${PROXY_PATH_BUILD} before accessing this service. The original service does only listen on localhost:${HTTP_PORT_BUILD}.
            - "traefik.http.middlewares.strip-build.stripprefix.prefixes=${PROXY_PATH_BUILD}"
            - "traefik.http.routers.build.middlewares=strip-build@docker"

            - "com.centurylinklabs.watchtower.enable=true" # Watchtower will update this container if /v1/update is fetched

#            - "traefik.http.routers.build.tls.certresolver=sslresolver" #Necessary when running on a remote server with a letsencrypt certificate
        networks:
            - visualboost
        depends_on:
            - mongodb_build
            - main

    react:
        extends:
            file: ${DOCKER_SERVICE_PATH}/react/react.yml
            service: react_app
        volumes:
            - ./nginx/templates:/etc/nginx/templates/
            - ${LOG_DIR_NGINX}:/logs/nginx/ #Directory for log files
        labels:
            - "traefik.enable=true" #Detect this service
            - "traefik.http.routers.react.entrypoints=visualboost" #Listen on Port ${PROXY_PORT}
            - "traefik.http.routers.react.rule=Host(`${DOMAIN}`)"  # Forward to react container when calling ${DOMAIN}
            - "traefik.http.services.react.loadbalancer.server.port=${HTTP_PORT_REACT}" # Forward request to port ${HTTP_PORT_REACT}

            - "com.centurylinklabs.watchtower.enable=true" # Watchtower will update this container if /v1/update is fetched

#            - "traefik.http.routers.react.tls.certresolver=sslresolver" #Necessary when running on a remote server with a letsencrypt certificate
        networks:
            - visualboost
        environment:
            - SSL_ENABLED=${SSL_ENABLED} #if SSL_ENABLED=false the service uses http:// instead of https://
        depends_on:
            - build

    watchtower:
        container_name: "visualboost_service_distribution"
        image: containrrr/watchtower
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        command: --debug --http-api-update
        environment:
            - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_TOKEN}
        labels:
            - "com.centurylinklabs.watchtower.enable=false"

            - "traefik.enable=true" #Detect this service
            - "traefik.http.routers.watchtower.entrypoints=visualboost" #Listen on Port ${PROXY_PORT}
            - "traefik.http.routers.watchtower.rule=Host(`${DOMAIN}`) && PathPrefix(`${PROXY_PATH_WATCHTOWER}`)" #Forward to this service when the domain with the path ${PROXY_PATH_BUILD} is called
            - "traefik.http.services.watchtower.loadbalancer.server.port=8080" # Forward request to port 8080 - the watchtower api does only run on port 8080

            # Add authorization header to request
            - "traefik.http.middlewares.add-header-watchtower.headers.customrequestheaders.Authorization=Bearer ${WATCHTOWER_TOKEN}"
            #Add replace path middleware
            - "traefik.http.middlewares.strip-watchtower.stripprefix.prefixes=${PROXY_PATH_WATCHTOWER}"

            - "traefik.http.routers.watchtower.middlewares=strip-watchtower@docker, add-header-watchtower@docker"
        networks:
            - visualboost

    reverse_proxy:
            container_name: "visualboost_reverse_proxy"
            image: traefik:v2.10
            command:
                - "com.centurylinklabs.watchtower.enable=false" #Watchtower won't update the reverse proxy by fetching /v1/update

                - "--providers.docker" #run traefik with docker
                - "--providers.docker.exposedByDefault=false" #avoid that traefik auto detect the docker services
                - "--providers.docker.network=${NETWORK}" #set docker network
                - "--entrypoints.visualboost.address=:${PROXY_PORT}" #traefik listen on port ${PROXY_PORT}

#                - "--certificatesresolvers.sslresolver.acme.tlschallenge=true" #Necessary when running on a remote server with a letsencrypt certificate
#                - "--certificatesresolvers.sslresolver.acme.email=${LETS_ENCRYPT_MAIL}" #Necessary when running on a remote server with a letsencrypt certificate
#                - "--certificatesresolvers.sslresolver.acme.storage=/letsencrypt/acme.json" #Necessary when running on a remote server with a letsencrypt certificate

#                - "--log.level=DEBUG" #Enable Logging
            ports:
                - "${PROXY_PORT}:${PROXY_PORT}"
            volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
#                - ./letsencrypt:/letsencrypt #Necessary when running on a remote server with a letsencrypt certificate
            networks:
                - visualboost
            depends_on:
                - react
                - watchtower


networks:
   visualboost:
       name: ${NETWORK}
